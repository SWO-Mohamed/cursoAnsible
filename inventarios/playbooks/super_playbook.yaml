# Este es mi fichero de playbook

--- #crear un nuevo play
# Contra qien opero
- hosts: all # el guion es un item de la lista
#Opciones de conexion
  remote_user: root
  order: inventory # reverse_inventory | sorted | reverse_sorted | shuffle
  # Ansible ira ejecuntado las TASKS de manera secuencial pero en paralelo sobre diferentes entornos
  # Por defecto lo hace de 5 en 5
  
  # variables TODO
  vars:
   variable1: Hola amigo !!
   variable2: 22
   variable3: 
        subvalor1: 1
        subvalor2: 2
        
  #comienza la difinicion de tareas
  tasks:
  
  # Comienza UNA tarea
   - name: Mi primera tarea
     debug:
        # Si quiero usar variables, uso doblñe llaves y se abre/cierra comillas dobles
        msg: "{{variable1}} esta sera mi primera tarea"
      
  # Comienza otra tarea
   - name: Mi segunda tarea
     debug:
        # unsafe eVITA que un texto se procese por JINJAAAA !!!
        msg: !unsafe "En ninja va todo con dobles llaves {{ Aqui va mi variable }}"
      
  # Comienza otra tarea
   - name: Mi tercera tarea
     debug:
        msg: "{{ variable1 }} voy a comezar la tarea {{ numerotarea }}, en el servidor {{ sistema }} {{ sitema2 }}"
     # dentro de una tarea podemos poner variables nuevas 
     vars:
      numerotarea: 3
      
   # Comienza otra tarea con variables de diccionario
   - name: Mi quarta tarea
     debug:
        msg: "Valores del diccionario {{ variable3.subvalor2 }}"
        
   # Comienza otra tarea para obetner los facts. Informacion del equipo
   - name: Mi tarea de facts
     debug:
        # msg: "{{ ansible.facts }}"
        var: ansible_facts.dns.nameservers[0]
        
 # AREA --- CONDICIONALES----------------       
    # Mi primera tarea CONDICIONAL
   - name: Mi tarea condicional
     debug:
        msg: "He entrado"
        # WHEN: ansible_facts.distribution == 'Ubuntu' and variable2 == 2
        # WHEN: ansible_facts.distribution == 'Ubuntu' or variable2 == 2
     when: # esta sintaxi es un AND encuebierto
      - ansible_facts.distribution == 'Ubuntu'
      - variable2 == 22
      
    # Mi tarea NORMALITA
   - name: Mi tarea normalita 1
     debug:
      msg: "Me ejecuto normalmente 1"
     changed_when: True
     notify: mievento
     
     # Mi tarea NORMALITA 2
   - name: Mi tarea normalita 2
     debug:
      msg: "Me ejecuto normalmente 2"
     changed_when: True
     notify: mievento
     
    # Una tarea que explosiva
   - name: Mi tarea EXPLOSIVA
     shell:
      cmd: umane
     ignore_errors: True
     failed_when: explosiva.rc > 100
     register: explosiva
      
    # Una tarea DETRAS de la explosion
   - name: Mi tarea EXPLOSIVA resultado
     debug:
      msg: "{{ explosiva.stdout }}"
     when: explosiva.rc == 0
     
### Expresiones para utilizar en los WHEN --> when, failed_when, changed_when
#
#  Expresiones sobre tareas que se han ejecutado
#	explosiva is failed
#	explosiva is succeeded
#	explosiva is changed
#
#  Otras expresiones utiles sobres variables(incluyendo tareas que se hayan ejecutado)
#	mivariable is defioned
#	mivariable is undifined or mivariable == false
#

 # Una tarea DETRAS de la explosion
   - name: Una tarea que comprueba un texto NOT FOUND
     debug:
      msg: La salida de error de la tarea explosiva contiene 'not found'
     when: explosiva.stderr is match(".*not.*") 
     # expresion regulares
     # when: "'found' not in explosiva.stderr"
     # when: explosiva.stderr is match (".*not.*")
     # when: explosiva.stderr is search("not")
     # when: explosiva.stderr is search("n.t f..d") Cualquier carater
     
     
     # Nuestra primera TAREA en BUCLE
   - name: Primer bucle
     debug:
      msg: "Ahora voy a haceer algo con el puerto {{ item }}"
     loop: "{{ puertos }}"
     vars:
      puertos:
       - 80
       - 81
       - 83
       
   - name: informacion de los procesadores
     debug:
      msg: "lista de procesadores {{ item | upper}}" # filtro jinja2 'upper' poner en mayuscula
     loop: "{{ansible_facts.processor}}"
     loop_control:
      index_var: cpus # definir el nombre de la variable, dnd se guarda el dato
      
     when: (cpus+1) % 3 == 0

###
# Filtros jinja2
#
# abs, attr, batch, capitalize, center, default, dictsort, escape, filesizeformat, first, float, forceescape, format, 
# groupby, indent, int, join, last, length, list, lower, map, max, min, pprint, random, reject, rejectattr, replace, 
# reverse, round, safe, select, selectattr, slice, sort, string, striptags, sum, title, tojson, trim, truncate, unique, 
# upper, urlencode, urlize, wordcount, wordwrap, xmlattr
#
# Uso {{ variable | upper }}
#
# https://jinja.palletsprojects.com/en/2.11.x/templates/#builtin-filters

     
 # Variables dentro de loops. REQUIERE la VERSION 2.8 de ANSIBLE
# ansible_loop.allitems       La lista de todos los elementos en el bucle
# ansible_loop.index          La iteración actual del bucle. (comenzando en 1)
# ansible_loop.index0         La iteración actual del bucle. (comenzando en 0)
# ansible_loop.revindex       El número de iteraciones hasta acabar el bucle (comenzando en 1)
# ansible_loop.revindex0      El número de iteraciones hasta acabar el bucle (comenzando en 0)
# ansible_loop.first          Verdadero si es la primera iteración
# ansible_loop.last           Verdadero si es la última iteración
# ansible_loop.length         El número de elementos en el bucle
# ansible_loop.previtem       El elemento de la iteración anterior del bucle. Indefinido durante la primera iteración.
# ansible_loop.nextitem       El elemento de la siguiente iteración del bucle. Indefinido durante la última iteración.
 
#----------------------------------------------------------
#----------------------------------------------------------
# tarea que ha dado un cambio aparece HANDLERS(tarea normales)

  handlers:
    # Mi tarea OPCIONAL 1
   - name: tarea opcional 1
     debug:
      msg: "Me ejecuto opcionalmente 1"
     lista: mievento
     
    # Mi tarea OPCIONAL 2
   - name: tarea opcional 2
     debug:
      msg: "Me ejecuto opcionalmente 2"
     listen: mievento